//
//	 ______    ______    ______    
//	/\  __ \  /\  ___\  /\  ___\   
//	\ \  __<  \ \  __\_ \ \  __\_ 
//	 \ \_____\ \ \_____\ \ \_____\ 
//	  \/_____/  \/_____/  \/_____/ 
//
//	Copyright (c) 2012 BEE creators
//	http://www.whatsbug.com
//
//	Permission is hereby granted, free of charge, to any person obtaining a
//	copy of this software and associated documentation files (the "Software"),
//	to deal in the Software without restriction, including without limitation
//	the rights to use, copy, modify, merge, publish, distribute, sublicense,
//	and/or sell copies of the Software, and to permit persons to whom the
//	Software is furnished to do so, subject to the following conditions:
//
//	The above copyright notice and this permission notice shall be included in
//	all copies or substantial portions of the Software.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
//	IN THE SOFTWARE.
//
//
//  Bee_UILayout.m
//

#if (TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR)

#import "Bee_Log.h"
#import "Bee_UILayout.h"
#import "NSArray+BeeExtension.h"
#import "UIView+BeeExtension.h"
#import "CGRect+BeeExtension.h"

#import <objc/runtime.h>

#pragma mark -

#undef	LAYOUT_MAX_WIDTH
#define LAYOUT_MAX_WIDTH	(99999.0f)

#undef	LAYOUT_MAX_HEIGHT
#define LAYOUT_MAX_HEIGHT	(99999.0f)

#pragma mark -

@implementation BeeUIValue

DEF_INT( PIXEL,			0 )
DEF_INT( PERCENT,		1 )
DEF_INT( FILL_PARENT,	2 )
DEF_INT( WRAP_CONTENT,	3 )

@synthesize type = _type;
@synthesize value = _value;

- (NSString *)description
{
	if ( self.PIXEL == self.type )
	{
		return [NSString stringWithFormat:@"%.1fpx", _value];
	}
	else if ( self.PERCENT == self.type )
	{
		return [NSString stringWithFormat:@"%.1f%%", _value];
	}
	else if ( self.FILL_PARENT == self.type )
	{
		return @"fill_parent";
	}
	else if ( self.WRAP_CONTENT == self.type )
	{
		return @"wrap_content";
	}
	
	return @"";
}

+ (BeeUIValue *)pixel:(CGFloat)val
{
	BeeUIValue * value = [[[BeeUIValue alloc] init] autorelease];
	value.type = self.PIXEL;
	value.value = val;
	return value;
}

+ (BeeUIValue *)percent:(CGFloat)val
{
	BeeUIValue * value = [[[BeeUIValue alloc] init] autorelease];
	value.type = self.PERCENT;
	value.value = val;
	return value;
}

+ (BeeUIValue *)fillParent
{
	BeeUIValue * value = [[[BeeUIValue alloc] init] autorelease];
	value.type = self.FILL_PARENT;
	return value;
}

+ (BeeUIValue *)wrapContent
{
	BeeUIValue * value = [[[BeeUIValue alloc] init] autorelease];
	value.type = self.WRAP_CONTENT;
	return value;
}

+ (BeeUIValue *)fromString:(NSString *)str
{
	if ( 0 == str.length )
		return nil;
	
	BeeUIValue * value = [[[BeeUIValue alloc] init] autorelease];
	if ( value )
	{
		if ( [str hasSuffix:@"px"] )
		{
			value.type = self.PIXEL;
		}
		else if ( [str hasSuffix:@"%"] )
		{
			value.type = self.PERCENT;
		}
		else if ( NSOrderedSame == [str compare:@"fill_parent" options:NSCaseInsensitiveSearch] )
		{
			value.type = self.FILL_PARENT;
		}
		else if ( NSOrderedSame == [str compare:@"wrap_content" options:NSCaseInsensitiveSearch] )
		{
			value.type = self.WRAP_CONTENT;
		}
		else
		{
			value.type = self.PIXEL;
		}

		value.value = [str floatValue];
	}
	return value;
}

- (CGFloat)valueBy:(CGFloat)val
{
	if ( BeeUIValue.PIXEL == _type )
	{
		return _value;
	}
	else if ( BeeUIValue.PERCENT == _type )
	{
		return floorf( val * _value / 100.0f );
	}
	
	return val;
}

@end

#pragma mark -

@implementation BeeUILayout

DEF_STRING( ALIGN_CENTER,			@"center" )
DEF_STRING( ALIGN_LEFT,				@"left" )
DEF_STRING( ALIGN_TOP,				@"top" )
DEF_STRING( ALIGN_BOTTOM,			@"bottom" )
DEF_STRING( ALIGN_RIGHT,			@"right" )

DEF_STRING( ORIENTATION_HORIZONAL,	@"horizonal" )
DEF_STRING( ORIENTATION_VERTICAL,	@"vertical" )

DEF_STRING( POSITION_ABSOLUTE,		@"absolute" )
DEF_STRING( POSITION_RELATIVE,		@"relative" )

@synthesize always = _always;
@synthesize containable = _containable;
@synthesize visible = _visible;
@synthesize isRoot = _isRoot;
@synthesize root = _root;
@synthesize parent = _parent;
@synthesize name = _name;
@synthesize value = _value;
@synthesize styleID = _styleID;
@synthesize style = _style;
@synthesize classType = _classType;
@synthesize className = _className;
@synthesize properties = _properties;
@synthesize childs = _childs;
@synthesize childFrames = _childFrames;
@dynamic canvas;
@dynamic view;

@dynamic ADD;
@dynamic REMOVE;
@dynamic REMOVE_ALL;

@dynamic x;
@dynamic y;
@dynamic w;
@dynamic h;
@dynamic position;
@dynamic margin_top;
@dynamic margin_bottom;
@dynamic margin_left;
@dynamic margin_right;
@dynamic padding_top;
@dynamic padding_bottom;
@dynamic padding_left;
@dynamic padding_right;
@dynamic align;
@dynamic v_align;
@dynamic floating;
@dynamic v_floating;
@dynamic orientation;

@dynamic X;
@dynamic Y;
@dynamic W;
@dynamic H;
@dynamic POSITION;
@dynamic MARGIN;
@dynamic MARGIN_TOP;
@dynamic MARGIN_BOTTOM;
@dynamic MARGIN_LEFT;
@dynamic MARGIN_RIGHT;
@dynamic PADDING;
@dynamic PADDING_TOP;
@dynamic PADDING_BOTTOM;
@dynamic PADDING_LEFT;
@dynamic PADDING_RIGHT;
@dynamic ALIGN;
@dynamic V_ALIGN;
@dynamic FLOATING;
@dynamic V_FLOATING;
@dynamic ORIENTATION;
@dynamic VISIBLE;
@dynamic ALWAYS;
@dynamic FULLFILL;

@dynamic EMPTY;
@dynamic REBUILD;
@dynamic RELAYOUT;

@dynamic BEGIN_LAYOUT;
@dynamic END_LAYOUT;
@dynamic BEGIN_CONTAINER;
@dynamic END_CONTAINER;
@dynamic VIEW;
@dynamic SPACE;

@dynamic DUMP;

- (NSString *)description
{
	return [NSString stringWithFormat:@"%@ (%@, %@, %@, %@)",
			self.name,
			self.x ? [self.x description] : @"nil",
			self.y ? [self.y description] : @"nil",
			self.w ? [self.w description] : @"nil",
			self.h ? [self.h description] : @"nil"];
}

+ (NSString *)generateName
{
	static NSUInteger __seed = 0;
	return [NSString stringWithFormat:@"layout_%u", __seed++];
}

- (id)init
{
	self = [super init];
	if ( self )
	{
		self.always = NO;
		self.containable = YES;
		self.visible = YES;
		self.root = self;
		self.parent = nil;
		self.name = [BeeUILayout generateName];
		self.value = nil;
		self.styleID = nil;
		self.style = nil;
		self.classType = nil;
		self.className = nil;
		self.properties = [NSMutableDictionary dictionary];
		self.childs = [NSMutableArray array];
		self.childFrames = [NSMutableDictionary dictionary];
	}
	return self;
}

- (void)dealloc
{
	[self.properties removeAllObjects];
	self.properties = nil;

	[self.childs removeAllObjects];
	self.childs = nil;

	[self.childFrames removeAllObjects];
	self.childFrames = nil;

	self.root = nil;
	self.parent = nil;
	self.name = nil;
	self.value = nil;
	self.styleID = nil;
	self.style = nil;
	self.classType = nil;
	self.className = nil;

	[_stack removeAllObjects];
	[_stack release];
	_stack = nil;

	[super dealloc];
}

- (void)dump
{
#if defined(__BEE_DEVELOPMENT__) && __BEE_DEVELOPMENT__

	CC( @"%@(%d childs) %@", self.name, self.childs.count, self );

	BeeLogIndent( 1 );

	for ( BeeUILayout * child in self.childs )
	{
		[child dump];
	}

	BeeLogUnindent( 1 );
	
#endif	// #if defined(__BEE_DEVELOPMENT__) && __BEE_DEVELOPMENT__
}

- (void)setCanvas:(UIView *)c;
{
	_canvas = c;
	
	for ( BeeUILayout * layout in self.childs )
	{
		[layout setCanvas:c];
	}
}

- (UIView *)view
{
	if ( nil == _canvas || nil == _name )
		return nil;
	
	return [_canvas viewWithTagString:_name];
}

- (UIView *)canvas
{
	return _canvas;
}

- (UIView *)buildView
{
	if ( nil == self.classType )
		return nil;

	if ( self.classType != [UIView class] && NO == [self.classType isSubclassOfClass:[UIView class]] )
		return nil;

	CC( @"buildView %@", [self.classType description] );
	
	UIView * view = [[[self.classType alloc] initWithFrame:CGRectZero] autorelease];
	if ( view )
	{
		view.tagString = self.name;
		view.nameSpace = self.root.name;
	}

	if ( self.style )
	{
		[self.style applyFor:view];
	}

	return view;
}

- (UIView *)buildViewAndSubviews
{
	UIView * view = [self buildView];
	if ( view )
	{
		for ( UIView * subview in [[view.subviews copy] autorelease] )
		{
			[subview removeFromSuperview];
		}

		[self buildSubviewsFor:view];
	}
	return view;
}

- (void)buildSubviewsForCanvas
{
	[self buildSubviewsFor:_canvas];
}

- (void)buildSubviewsFor:(UIView *)c depth:(NSUInteger)depth
{
	if ( nil == c )
	{
		CC( @"canvas not found" );
		return;
	}

	for ( BeeUILayout * layout in self.childs )
	{
		UIView * view = [layout buildView];
		if ( view )
		{
			[c addSubview:view];
			[c bringSubviewToFront:view];
		}
	}

	for ( BeeUILayout * layout in self.childs )
	{
		[layout buildSubviewsFor:c depth:(depth + 1)];
	}
	
	if ( 0 == depth )
	{
		[self reorderSubviewsFor:c];
	}
}

- (void)buildSubviewsFor:(UIView *)c
{
	[self buildSubviewsFor:c depth:0];
}

- (void)reorderSubviewsFor:(UIView *)c
{
	if ( nil == c )
	{
		CC( @"canvas not found" );
		return;
	}

	for ( BeeUILayout * layout in self.childs )
	{
		[layout reorderSubviewsFor:c];
	}

	UIView * view = self.view;
	if ( view )
	{
		[c bringSubviewToFront:view];
	}
}

- (CGFloat)estimateXBy:(CGRect)parentFrame
{
	CGFloat newX = parentFrame.origin.x;

	BeeUIValue * x = self.x;
    if ( x )
    {
        if ( BeeUIValue.PIXEL == x.type )
        {
			newX = newX + x.value;
        }
        else if ( BeeUIValue.PERCENT == x.type )
        {
			newX = newX + floorf(  parentFrame.size.width * x.value / 100.0f );
        }
    }
    
	return newX;
}

- (CGFloat)estimateYBy:(CGRect)parentFrame
{
	CGFloat newY = parentFrame.origin.y;

	BeeUIValue * y = self.y;
    if ( y )
    {
        if ( BeeUIValue.PIXEL == y.type )
        {
			newY = newY + y.value;
        }
        else if ( BeeUIValue.PERCENT == y.type )
        {
			newY = newY + floorf( parentFrame.size.width * y.value / 100.0f );
        }
    }
	
	return newY;
}

- (CGPoint)estimateOriginForCanvas
{
	return [self estimateOriginBy:(_canvas ? _canvas.bounds : CGRectZero)];
}

- (CGPoint)estimateOriginBy:(CGRect)parentFrame
{
	CGPoint	origin = parentFrame.origin;
	origin.x = [self estimateXBy:parentFrame];
	origin.y = [self estimateYBy:parentFrame];
	return origin;
}

- (CGFloat)estimateWBy:(CGRect)parentFrame
{
	CGSize	size = parentFrame.size;
	CGFloat	wPixels = 0.0f;

	BeeUIValue * w = self.w;
	if ( w )
	{
		if ( BeeUIValue.PIXEL == w.type )
		{
			wPixels = w.value;
		}
		else if ( BeeUIValue.PERCENT == w.type )
		{
			wPixels = floorf( size.width * w.value / 100.0f );
		}
		else if ( BeeUIValue.FILL_PARENT == w.type )
		{
			wPixels = size.width;
		}
		else if ( BeeUIValue.WRAP_CONTENT == w.type )
		{
			wPixels = -1.0f;
		}
		else
		{
			wPixels = size.width;
		}
	}
	else
	{
		wPixels = size.width;
	}

	return wPixels;
}

- (CGFloat)estimateHBy:(CGRect)parentFrame
{
	CGSize	size = parentFrame.size;
	CGFloat	hPixels = 0.0f;

	BeeUIValue * h = self.h;
	if ( h )
	{
		if ( BeeUIValue.PIXEL == h.type )
		{
			hPixels = h.value;
		}
		else if ( BeeUIValue.PERCENT == h.type )
		{
			hPixels = floorf( size.height * h.value / 100.0f );
		}
		else if ( BeeUIValue.FILL_PARENT == h.type )
		{
			hPixels = size.height;
		}
		else if ( BeeUIValue.WRAP_CONTENT == h.type )
		{
			hPixels = -1.0f;
		}
		else
		{
			hPixels = size.height;
		}
	}
	else
	{
		hPixels = size.height;
	}
	
	return hPixels;
}

- (CGSize)estimateSizeForCanvas
{
	CGRect parentFrame = (_canvas ? _canvas.bounds : CGRectZero);
	return [self estimateSizeBy:parentFrame];
}

- (CGSize)estimateSizeBy:(CGRect)parentFrame
{
	CGSize size;
	size.width = [self estimateWBy:parentFrame];
	size.height = [self estimateHBy:parentFrame];
	return size;
}

- (UIEdgeInsets)estimateMarginBy:(CGRect)parentFrame
{
    BeeUIValue * l = self.margin_left;
	BeeUIValue * r = self.margin_right;
	BeeUIValue * t = self.margin_top;
	BeeUIValue * b = self.margin_bottom;
    
	UIEdgeInsets edge = UIEdgeInsetsZero;
	
	if ( l )
	{
		edge.left = [l valueBy:parentFrame.size.width];
	}
	
	if ( r )
	{
		edge.right = [r valueBy:parentFrame.size.width];
	}
	
	if ( t )
	{
		edge.top = [t valueBy:parentFrame.size.height];
	}
	
	if ( b )
	{
		edge.bottom = [b valueBy:parentFrame.size.height];
	}
	
	return edge;
}

- (UIEdgeInsets)estimatePaddingBy:(CGRect)parentFrame
{
	BeeUIValue * l = self.padding_left;
	BeeUIValue * r = self.padding_right;
	BeeUIValue * t = self.padding_top;
	BeeUIValue * b = self.padding_bottom;
    
	UIEdgeInsets edge = UIEdgeInsetsZero;
	
	if ( l )
	{
		edge.left = [l valueBy:parentFrame.size.width];
	}
	
	if ( r )
	{
		edge.right = [r valueBy:parentFrame.size.width];
	}
	
	if ( t )
	{
		edge.top = [t valueBy:parentFrame.size.height];
	}
	
	if ( b )
	{
		edge.bottom = [b valueBy:parentFrame.size.height];
	}
	
	return edge;
}

- (CGRect)getViewFrame
{
	if ( nil == _name )
		return CGRectZero;

	NSValue * value = [self.root.childFrames objectForKey:_name];
	if ( nil == value )
		return CGRectZero;
	
	return [value CGRectValue];
}

- (void)setViewFrame:(CGRect)frame
{
	if ( nil == _name )
		return;
<<<<<<< .mine

=======
    
>>>>>>> .r7319
	[self.root.childFrames setObject:[NSValue valueWithCGRect:frame] forKey:_name];
}

- (BOOL)needAdjust:(BeeUIValue *)value
{
	BOOL need = NO;
	
	if ( value )
    {
		if ( BeeUIValue.PERCENT == value.type )
        {
			need = YES;
        }
		else if ( BeeUIValue.FILL_PARENT == value.type )
        {
			need = YES;
        }
    }

	return need;
}

- (void)adjustFloatingBy:(CGRect)parentFrame
{
	CGRect frame = [self getViewFrame];

	if ( [self needAdjust:self.x] )
	{
		frame.origin.x = [self estimateXBy:parentFrame];
	}
	
	if ( [self needAdjust:self.y] )
	{
		frame.origin.y = [self estimateYBy:parentFrame];
	}
	
	if ( [self needAdjust:self.w] )
	{
		frame.size.width = [self estimateWBy:parentFrame];
	}
	
	if ( [self needAdjust:self.h] )
	{
		frame.size.height = [self estimateHBy:parentFrame];
	}
	
	NSString * floating = self.floating;
	NSString * vfloating = self.v_floating;
	
    UIEdgeInsets margin = [self estimateMarginBy:parentFrame];
    
	if ( floating )
	{
        parentFrame.origin.x += margin.left;
        parentFrame.size.width -= margin.right;
        
        if ( [floating isEqualToString:self.ALIGN_CENTER] )
        {
            frame = CGRectAlignX( frame, parentFrame );
        }
        else if ( [floating isEqualToString:self.ALIGN_RIGHT] )
        {
            frame = CGRectAlignRight( frame, parentFrame );
        }
        else
        {
			frame = CGRectAlignLeft( frame, parentFrame );
        }
        
        // reset the childs'frame
        CGSize size = CGRectGetDistance( parentFrame, frame );
        
        if ( !CGSizeEqualToSize(size, CGSizeZero) )
        {
            [self offsetChildsFrameBy:size];
        }
	}
	
	if ( vfloating )
	{
        parentFrame.origin.y += margin.top;
        parentFrame.size.height -= margin.bottom;
        
        if ( [vfloating isEqualToString:self.ALIGN_TOP] )
        {
            frame = CGRectAlignTop( frame, parentFrame );
        }
        else if ( [vfloating isEqualToString:self.ALIGN_BOTTOM] )
        {
            frame = CGRectAlignBottom( frame, parentFrame );
        }
        else
        {
            frame = CGRectAlignY( frame, parentFrame );
        }
        
        // reset the childs'frame
        CGSize size = CGRectGetDistance( parentFrame, frame );
        
        if ( !CGSizeEqualToSize(size, CGSizeZero) )
        {
            [self offsetChildsFrameBy:size];
        }
	}

	[self setViewFrame:frame];
    
	CC( @"adjustFrame '%@', frame = (%.0f, %.0f, %.0f, %.0f)", _name,
	   frame.origin.x, frame.origin.y,
	   frame.size.width, frame.size.height );	
}

- (CGRect)estimateFrameForCanvas
{
	return [self estimateFrameBy:(_canvas ? _canvas.bounds : CGRectZero)];
}

- (CGRect)estimateFrameBy:(CGRect)parentFrame
{
	CC( @"estimate '%@', frame = (%.0f, %.0f, %.0f, %.0f)", _name,
	   parentFrame.origin.x, parentFrame.origin.y,
	   parentFrame.size.width, parentFrame.size.height );

	UIView * view = self.view;
    NSString * align = self.align;
	NSString * valign = self.v_align;

// Step1, calculate this frame

	CGSize rootBound = CGSizeZero;
	CGRect thisFrame;
	thisFrame.origin = [self estimateOriginBy:parentFrame];
	thisFrame.size = [self estimateSizeBy:parentFrame];
	
	UIEdgeInsets margin = [self estimateMarginBy:thisFrame];
	UIEdgeInsets padding = [self estimatePaddingBy:thisFrame];
	
// Step2, change this frame by content size if "wrap_content"
	
	BOOL wWrapping = (thisFrame.size.width < 0.0f) ? YES : NO;
	BOOL hWrapping = (thisFrame.size.height < 0.0f) ? YES : NO;

	if ( self.childs.count )
	{
// Step3.1, calc thisFrame by childs

		CGRect layoutBound;
		layoutBound.origin = thisFrame.origin;
		layoutBound.size.width = wWrapping ? LAYOUT_MAX_WIDTH : thisFrame.size.width;
		layoutBound.size.height = hWrapping ? LAYOUT_MAX_HEIGHT : thisFrame.size.height;

		CGRect lineWindow = layoutBound;
		CGSize layoutMaxSize = CGSizeZero;

		BOOL horizonal = (NSOrderedSame == [self.orientation compare:self.ORIENTATION_HORIZONAL options:NSCaseInsensitiveSearch]) ? YES : NO;

		for ( BeeUILayout * child in self.childs )
		{
			if ( NO == child.visible && NO == child.always )
				continue;
			
			UIView * childView = child.view;
			if ( childView && childView.hidden )
				continue;

			CGRect relativeBound;

			if ( [child.position isEqualToString:self.POSITION_ABSOLUTE] )
			{
				relativeBound.origin = thisFrame.origin;
				relativeBound.size = lineWindow.size;
			}
			else
			{
				relativeBound = lineWindow;
			}

			relativeBound.origin.x += padding.left;
			relativeBound.origin.y += padding.top;
			relativeBound.size.width -= (padding.left + padding.right);
			relativeBound.size.height -= (padding.top + padding.bottom);

			CGRect childFrame = [child estimateFrameBy:relativeBound];

			if ( _isRoot )
			{
				if ( childFrame.size.width > rootBound.width )
				{
					rootBound.width = childFrame.size.width;
				}
				if ( childFrame.size.height > rootBound.height )
				{
					rootBound.height = childFrame.size.height;
				}				
			}

			// no need calculate child's position by lineWindow if the position equals "absolute"
			if ( NO == [child.position isEqualToString:self.POSITION_ABSOLUTE] )
			{
				if ( horizonal )
				{
				// Step 1)
				// move window

					lineWindow.origin.x += childFrame.size.width;
					lineWindow.size.width -= childFrame.size.width;

					if ( childFrame.size.height > lineWindow.size.height )
					{
						lineWindow.size.height = childFrame.size.height;
					}

				// Step 2)
				// calculate max size
					
					// when it need break line, the layoutMaxSize should be resized to childFrame.size, because of its being break line.
					if ( lineWindow.size.width > 0.0f )
					{
						if ( (lineWindow.origin.x - thisFrame.origin.x) > layoutMaxSize.width )
						{
							layoutMaxSize.width = (lineWindow.origin.x - thisFrame.origin.x);
						}
						
						if ( childFrame.size.height > layoutMaxSize.height )
						{
							layoutMaxSize.height = childFrame.size.height;
						}
					}
					else
					{
						layoutMaxSize = childFrame.size;
					}
					
				// Step 3)
				// break line if reach right edge
					
					if ( lineWindow.size.width <= 0.0f )
					{
						lineWindow.origin.x = layoutBound.origin.x;
						lineWindow.origin.y += layoutMaxSize.height;
						lineWindow.size.width = layoutBound.size.width;
						lineWindow.size.height = layoutBound.size.height - lineWindow.origin.y;

						if ( (lineWindow.origin.y - thisFrame.origin.y) > layoutMaxSize.height )
						{
							layoutMaxSize.height = (lineWindow.origin.y - thisFrame.origin.y);
						}
					}
				}
				else
				{
					
				// Step 1)
				// move window

					lineWindow.origin.y += childFrame.size.height;
					lineWindow.size.height -= childFrame.size.height;
					
					if ( childFrame.size.width > lineWindow.size.width )
					{
						lineWindow.size.width = childFrame.size.width;
					}
					
				// Step 2)
				// calculate max size
					
					if ( childFrame.size.width > layoutMaxSize.width )
					{
						layoutMaxSize.width = childFrame.size.width;
					}

					if ( (lineWindow.origin.y - thisFrame.origin.y) > layoutMaxSize.height )
					{
						layoutMaxSize.height = (lineWindow.origin.y - thisFrame.origin.y);
					}
					
				// Step 3)
				// break line if reach bottom edge

					if ( lineWindow.size.height <= 0.0f )
					{
						lineWindow.origin.y = layoutBound.origin.y;
						lineWindow.origin.x += layoutMaxSize.width;
						lineWindow.size.height = layoutBound.size.height;
						lineWindow.size.width = layoutBound.size.width - lineWindow.origin.x;

						if ( (lineWindow.origin.x - thisFrame.origin.x) > layoutMaxSize.width )
						{
							layoutMaxSize.width = (lineWindow.origin.x - thisFrame.origin.x);
						}
					}
				}
			}
		}
		
		CGSize diff = CGSizeZero;
		
		if ( wWrapping )
		{
			thisFrame.size.width = layoutMaxSize.width;
		}
		else if ( align )
		{
			if ( [align isEqualToString:self.ALIGN_CENTER] )
			{
				diff.width = (layoutMaxSize.width - thisFrame.size.width) / 2.0f;
			}
			else if ( [align isEqualToString:self.ALIGN_RIGHT] )
			{
				diff.width = layoutMaxSize.width - thisFrame.size.width;
			}
		}
		
		if ( hWrapping )
		{
			thisFrame.size.height = layoutMaxSize.height;
		}
		else if ( valign )
		{
			if ( [valign isEqualToString:self.ALIGN_CENTER] )
			{
				diff.height = (layoutMaxSize.height - thisFrame.size.height) / 2.0f;
			}
			else if ( [valign isEqualToString:self.ALIGN_BOTTOM] )
			{
				diff.height = layoutMaxSize.height - thisFrame.size.height;
			}
		}
		
		if ( NO == CGSizeEqualToSize( diff, CGSizeZero ) )
		{
			[self offsetChildsFrameBy:diff];
		}
	}
	else
	{
// Step3.2, calc thisFrame by contentSize
		
		if ( wWrapping || hWrapping )
		{
			if ( view )
			{
				CGSize wrapBound;
				wrapBound.width = wWrapping ? parentFrame.size.width : thisFrame.size.width;
				wrapBound.height = hWrapping ? parentFrame.size.height : thisFrame.size.height;
				
				if ( wWrapping && hWrapping )
				{
					thisFrame.size = [view contentSizeByBound:wrapBound];
				}
				else if ( hWrapping )
				{
					thisFrame.size = [view contentSizeByWidth:wrapBound];
				}
				else
				{
					thisFrame.size = [view contentSizeByHeight:wrapBound];
				}
			}
		}
	}

	for ( BeeUILayout * child in self.childs )
	{
		if ( NO == child.visible && NO == child.always )
			continue;
		
		[child adjustFloatingBy:thisFrame];
	}
    
	CGRect viewFrame = thisFrame;
	viewFrame.origin.x += padding.left;
	viewFrame.origin.y += padding.top;
 
	viewFrame.origin.x += margin.left;
	viewFrame.origin.y += margin.top;
    
	[self setViewFrame:viewFrame];
    
	if ( _isRoot )
	{
		return CGSizeMakeBound( rootBound );
	}
	else
	{
        thisFrame.size.width += (padding.left + padding.right);
        thisFrame.size.height += (padding.top + padding.bottom);
        
		thisFrame.size.width += (margin.left + margin.right);
		thisFrame.size.height += (margin.top + margin.bottom);
        
        return thisFrame;
	}
}

- (void)changeFrame:(CGRect)frame
{
	CC( @"changeFrame '%@', frame' = (%.0f, %.0f, %.0f, %.0f)", _name,
	   frame.origin.x, frame.origin.y,
	   frame.size.width, frame.size.height );

	UIView * view = self.view;
	if ( view )
	{
		view.frame = frame;
	}
}

- (void)offsetFrameBy:(CGSize)size
{
	UIView * view = self.view;
	if ( view )
	{
		CGRect frame = [self getViewFrame];
        frame = CGRectOffset( frame, size.width, size.height );
        [self setViewFrame:frame];
	}
}

- (void)offsetChildsFrameBy:(CGSize)size
{
	for ( BeeUILayout * child in self.childs )
	{
		if ( NO == child.visible && NO == child.always )
			continue;

		[child offsetFrameBy:size];
		[child offsetChildsFrameBy:size];
	}
}

- (CGRect)relayoutForCanvas;
{
	return [self relayoutForBound:_canvas.bounds];
}

- (CGRect)relayoutForBound:(CGRect)parentFrame
{
	CGRect frame = [self estimateFrameBy:parentFrame];
	
	if ( self.canvas )
	{
		for ( UIView * view in self.canvas.subviews )
		{
			NSString * name = view.tagString;
			if ( nil == name )
				continue;
			
			NSValue * value = [self.root.childFrames objectForKey:name];
			if ( value )
			{
				CGRect viewFrame = value.CGRectValue;
				
				CC( @"changeFrame '%@', frame = (%.0f, %.0f, %.0f, %.0f)", name,
				   viewFrame.origin.x, viewFrame.origin.y,
				   viewFrame.size.width, viewFrame.size.height );

				view.frame = viewFrame;
			}
		}
	}

//	self.canvas.bounds = CGSizeMakeBound( frame.size );

	return frame;
}

#pragma mark -

- (BeeUILayout *)topLayout
{
	if ( nil == _stack || 0 == _stack.count )
		return self;
	
	return _stack.lastObject;
}

- (void)pushLayout:(BeeUILayout *)layout
{
	if ( nil == layout )
		return;
	
	if ( nil == _stack )
	{
		_stack = [[NSMutableArray alloc] init];
	}
	
	[_stack pushTail:layout];
}

- (void)popLayout
{
	if ( _stack )
	{
		[_stack popTail];
	}
}

#pragma mark -

- (BeeUIValue *)x
{
	return [self.properties objectForKey:@"x"];
}

- (BeeUIValue *)y
{
	return [self.properties objectForKey:@"y"];
}

- (BeeUIValue *)w
{
	return [self.properties objectForKey:@"w"];
}

- (BeeUIValue *)h
{
	return [self.properties objectForKey:@"h"];
}

- (NSString *)position
{
	return [self.properties objectForKey:@"position"];
}

- (BeeUIValue *)margin_left
{
	return [self.properties objectForKey:@"margin_left"];
}

- (BeeUIValue *)margin_right
{
	return [self.properties objectForKey:@"margin_right"];
}

- (BeeUIValue *)margin_top
{
	return [self.properties objectForKey:@"margin_top"];
}

- (BeeUIValue *)margin_bottom
{
	return [self.properties objectForKey:@"margin_bottom"];
}

- (BeeUIValue *)padding_left
{
	return [self.properties objectForKey:@"padding_left"];
}

- (BeeUIValue *)padding_right
{
	return [self.properties objectForKey:@"padding_right"];
}

- (BeeUIValue *)padding_top
{
	return [self.properties objectForKey:@"padding_top"];
}

- (BeeUIValue *)padding_bottom
{
	return [self.properties objectForKey:@"padding_bottom"];
}

- (NSString *)align
{
	return [self.properties objectForKey:@"align"];
}

- (NSString *)v_align
{
	return [self.properties objectForKey:@"v_align"];
}

- (NSString *)floating
{
	return [self.properties objectForKey:@"float"];
}

- (NSString *)v_floating
{
	return [self.properties objectForKey:@"v_float"];
}

- (NSString *)orientation
{
	return [self.properties objectForKey:@"orientation"];
}

#pragma mark -

- (BeeUILayoutBlockN)X
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
		BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		if ( value )
		{
			[self.properties setObject:value forKey:@"x"];
		}
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)Y
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
		BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		if ( value )
		{
			[self.properties setObject:value forKey:@"y"];
		}
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)W
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
		BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		if ( value )
		{
			[self.properties setObject:value forKey:@"w"];
		}
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)H
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
		BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		if ( value )
		{
			[self.properties setObject:value forKey:@"h"];
		}
		return self;
	};

	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)POSITION
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
		[self.properties setObject:first forKey:@"position"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)MARGIN
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
        BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		[self.properties setObject:value forKey:@"margin_left"];
		[self.properties setObject:value forKey:@"margin_right"];
		[self.properties setObject:value forKey:@"margin_top"];
		[self.properties setObject:value forKey:@"margin_bottom"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)MARGIN_TOP
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
        BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		[self.properties setObject:value forKey:@"margin_top"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)MARGIN_BOTTOM
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
        BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		[self.properties setObject:value forKey:@"margin_bottom"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)MARGIN_LEFT
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
        BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		[self.properties setObject:value forKey:@"margin_left"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)MARGIN_RIGHT
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
        BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		[self.properties setObject:value forKey:@"margin_right"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)PADDING
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
        BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		[self.properties setObject:value forKey:@"padding_left"];
		[self.properties setObject:value forKey:@"padding_right"];
		[self.properties setObject:value forKey:@"padding_top"];
		[self.properties setObject:value forKey:@"padding_bottom"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)PADDING_TOP
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
        BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		[self.properties setObject:value forKey:@"padding_top"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)PADDING_BOTTOM
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
        BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		[self.properties setObject:value forKey:@"padding_bottom"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)PADDING_LEFT
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
        BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		[self.properties setObject:value forKey:@"padding_left"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)PADDING_RIGHT
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
        BeeUIValue * value = [BeeUIValue fromString:(NSString *)first];
		[self.properties setObject:value forKey:@"padding_right"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)ALIGN
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
		[self.properties setObject:first forKey:@"align"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)V_ALIGN
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
		[self.properties setObject:first forKey:@"v_align"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)FLOATING
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
		[self.properties setObject:first forKey:@"float"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)V_FLOATING
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
		[self.properties setObject:first forKey:@"v_float"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockN)ORIENTATION
{
	BeeUILayoutBlockN block = ^ BeeUILayout * ( id first, ... )
	{
		[self.properties setObject:first forKey:@"orientation"];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockB)VISIBLE
{
	BeeUILayoutBlockB block = ^ BeeUILayout * ( BOOL flag )
	{
		self.visible = flag;
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockB)ALWAYS
{
	BeeUILayoutBlockB block = ^ BeeUILayout * ( BOOL flag )
	{
		self.always = flag;
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlock)FULLFILL
{
	BeeUILayoutBlock block = ^ BeeUILayout * ( void )
	{
		[self.properties setObject:[BeeUIValue pixel:0] forKey:@"x"];
		[self.properties setObject:[BeeUIValue pixel:0] forKey:@"y"];
		[self.properties setObject:[BeeUIValue percent:100] forKey:@"w"];
		[self.properties setObject:[BeeUIValue percent:100] forKey:@"h"];

		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlock)EMPTY
{
	BeeUILayoutBlock block = ^ BeeUILayout * ( void )
	{
		CC( @"empty layout" );
		
		[self.childs removeAllObjects];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlock)REBUILD
{
	BeeUILayoutBlock block = ^ BeeUILayout * ( void )
	{
		CC( @"build layout" );
		
		[self buildSubviewsForCanvas];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlock)RELAYOUT
{
	BeeUILayoutBlock block = ^ BeeUILayout * ( void )
	{
		[self relayoutForCanvas];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlock)BEGIN_LAYOUT
{
	BeeUILayoutBlock block = ^ BeeUILayout * ( void )
	{
		CC( @"begin layout" );
		
		BeeLogIndent( 1 );
		
		[self.childs removeAllObjects];
		return self;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlock)END_LAYOUT
{
	BeeUILayoutBlock block = ^ BeeUILayout * ( void )
	{
		BeeUILayout * layout = self;
		
		while ( layout && layout.parent )
		{
			layout = layout.parent;
		}
		
		BeeLogUnindent( 1 );
		
		CC( @"end layout" );
		
		return layout;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockS)BEGIN_CONTAINER
{
	BeeUILayoutBlockS block = ^ BeeUILayout * ( NSString * tag )
	{
		BeeLogIndent( 1 );

		BeeUILayout * layout = [[[BeeUILayout alloc] init] autorelease];
		if ( layout )
		{
			layout.containable = YES;
			layout.root = self.root;
			layout.parent = self.containable ? self : self.parent;
			layout.canvas = self.canvas;
			layout.classType = nil;
			layout.className = nil;
			layout.visible = layout.parent.visible;

			if ( tag )
			{
				layout.name = tag;
			}
            
//			layout.W( @"wrap_content" );
//			layout.H( @"wrap_content" );

			[layout.parent.childs addObject:layout];
		}
		
		CC( @"container %@", layout.name );
        
		[self.root pushLayout:layout];
		return [self.root topLayout];
	};

	return [[block copy] autorelease];
}

- (BeeUILayoutBlock)END_CONTAINER
{
	BeeUILayoutBlock block = ^ BeeUILayout * ( void )
	{
		BeeLogUnindent( 1 );

		CC( @"end of container" );

		[self.root popLayout];
		return [self.root topLayout];
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlockCS)VIEW
{
	BeeUILayoutBlockCS block = ^ BeeUILayout * ( Class clazz, NSString * tag )
	{
		BeeUILayout * layout = [[[BeeUILayout alloc] init] autorelease];
		if ( layout )
		{
			layout.containable = NO;
			layout.root = self.root;
			layout.parent = self.containable ? self : self.parent;
			layout.canvas = self.canvas;
			layout.classType = clazz;
			layout.className = [NSString stringWithUTF8String:class_getName(clazz)];
			layout.visible = layout.parent.visible;

			if ( tag )
			{
				layout.name = tag;
			}
            
			[layout.parent.childs addObject:layout];
		}

		CC( @"subview(%@) %@", [clazz description], layout.name );

		return layout;
	};
	
	return [[block copy] autorelease];
}

- (BeeUILayoutBlock)SPACE
{
	BeeUILayoutBlock block = ^ BeeUILayout * ( void )
	{
		BeeUILayout * layout = [[[BeeUILayout alloc] init] autorelease];
		if ( layout )
		{
			layout.containable = NO;
			layout.root = self.root;
			layout.parent = self.containable ? self : self.parent;
			layout.canvas = self.canvas;
			layout.classType = nil;
			layout.className = nil;
			layout.visible = layout.parent.visible;

            CC( @"space %@", layout.name );
            
			[layout.parent.childs addObject:layout];
		}
		
		return layout;
	};

	return [[block copy] autorelease];	
}

@end

#endif	// #if (TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR)